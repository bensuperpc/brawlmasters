From 7d862cc34f09c4b66937c9781806a9cdae5ee46e Mon Sep 17 00:00:00 2001
From: Bensuperpc <bensuperpc@gmail.com>
Date: Fri, 14 Jul 2023 05:46:24 +0200
Subject: [PATCH] Add instanced support

Patch from: https://github.com/ChrisDill/raylib-instancing

Signed-off-by: Bensuperpc <bensuperpc@gmail.com>
---
 src/rlgl.h | 30 ++++++++++++++++++++++++------
 1 file changed, 24 insertions(+), 6 deletions(-)

diff --git a/src/rlgl.h b/src/rlgl.h
index 86208de4..dd45aab1 100644
--- a/src/rlgl.h
+++ b/src/rlgl.h
@@ -375,6 +375,7 @@ typedef struct rlRenderBatch {
     rlDrawCall *draws;          // Draw calls array, depends on textureId
     int drawCounter;            // Draw calls counter
     float currentDepth;         // Current depth value for next draw
+    int instances;
 } rlRenderBatch;
 
 // OpenGL version
@@ -2771,18 +2772,35 @@ void rlDrawRenderBatch(rlRenderBatch *batch)
                 // Bind current draw call texture, activated as GL_TEXTURE0 and Bound to sampler2D texture0 by default
                 glBindTexture(GL_TEXTURE_2D, batch->draws[i].textureId);
 
-                if ((batch->draws[i].mode == RL_LINES) || (batch->draws[i].mode == RL_TRIANGLES)) glDrawArrays(batch->draws[i].mode, vertexOffset, batch->draws[i].vertexCount);
+                if ((batch->draws[i].mode == RL_LINES) || (batch->draws[i].mode == RL_TRIANGLES))
+                {
+                    if (batch->instances == 0)
+                    {
+                        glDrawArrays(batch->draws[i].mode, vertexOffset, batch->draws[i].vertexCount);
+                    }
+                    else
+                    {
+                        glDrawArraysInstanced(batch->draws[i].mode, vertexOffset, batch->draws[i].vertexCount, batch->instances);
+                    }
+                }
                 else
                 {
+                    if (batch->instances == 0)
+                    {
 #if defined(GRAPHICS_API_OPENGL_33)
-                    // We need to define the number of indices to be processed: elementCount*6
-                    // NOTE: The final parameter tells the GPU the offset in bytes from the
-                    // start of the index buffer to the location of the first index to process
-                    glDrawElements(GL_TRIANGLES, batch->draws[i].vertexCount/4*6, GL_UNSIGNED_INT, (GLvoid *)(vertexOffset/4*6*sizeof(GLuint)));
+                        // We need to define the number of indices to be processed: elementCount*6
+                        // NOTE: The final parameter tells the GPU the offset in bytes from the
+                        // start of the index buffer to the location of the first index to process
+                        glDrawElements(GL_TRIANGLES, batch->draws[i].vertexCount/4*6, GL_UNSIGNED_INT, (GLvoid *)(vertexOffset/4*6*sizeof(GLuint)));
 #endif
 #if defined(GRAPHICS_API_OPENGL_ES2)
-                    glDrawElements(GL_TRIANGLES, batch->draws[i].vertexCount/4*6, GL_UNSIGNED_SHORT, (GLvoid *)(vertexOffset/4*6*sizeof(GLushort)));
+                        glDrawElements(GL_TRIANGLES, batch->draws[i].vertexCount/4*6, GL_UNSIGNED_SHORT, (GLvoid *)(vertexOffset/4*6*sizeof(GLushort)));
 #endif
+                    }
+                    else
+                    {
+                        glDrawElementsInstanced(GL_TRIANGLES, batch->draws[i].vertexCount/4*6, GL_UNSIGNED_INT, (GLvoid *)(vertexOffset/4*6*sizeof(GLuint)), batch->instances);
+                    }
                 }
 
                 vertexOffset += (batch->draws[i].vertexCount + batch->draws[i].vertexAlignment);
-- 
2.41.0

